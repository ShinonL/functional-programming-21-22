// I am using Linux Manjaro just to get used to this OS

--- Q 1.3.1 ---
Another REPL language, beside ELM, is Python

--- E 1.9.1 ---
For fact 5 - 1, where fact is the function defined in the laboratory work, we should expect the program to first compute factorial of 5, which yields 120, and then extract 1. The final result being 119, which is also the result found when testing the code.
If the desired result was 24, which is factorial of 4, the call should have been done as: fact (5 - 1)

--- E 1.9.2 ---
By following the example I saw that for b = 10000 the stack overflows. Then I tried a binary search for b1 and b2. So i tried 5000 and saw that it still overflows. Then for 2500 it worked fine (slowAdd 0 2500 returned 2500).
The next steps:
slowAdd 0 3750 => 3750
slowAdd 0 4375 => 4375
slowAdd 0 4687 => overflow
slowAdd 0 4531 => 4531
slowAdd 0 4609 => overflow
slowAdd 0 4570 => 4570
slowAdd 0 4589 => overflow
slowAdd 0 4579 => overflow
slowAdd 0 4574 => overflow      -> smallest overflow
slowAdd 0 4572 => 4572
slowAdd 0 4573 => 4573          -> biggest working b value
From this I deduce that b1 = 4573 and b2 = 4574

--- E 1.9.3 ---
fib 40 => approx 1 sec
fib 45 => approx 10 sec
fib 50 => approx 2 min and 16 sec

--- E 1.9.4 ---
fibTail   50 => below 1 sec
fibTail  100 => below 1 sec
fibTail 1000 => below 1 sec

--- E 1.10.1 ---
The function used:
gcd a b = if a == 0 then b else gcd (modBy a b) a
I had at first a problem with the modulo because '%' was removed and at first I tried to do '7 % 2' as 'modBy 7 2', but it was supposed to be 'modBy 2 7'

--- E 1.10.2 ---
The function used:
ack n m = if n == 0 then (m + 1) else if m == 0 then ack (n-1) 1 else ack (n - 1) (ack n (m - 1))
The test results were as expected.

--- E 1.10.3 ---
The function used:
sudan n x y = if n == 0 then (x + y) else if (n > 0) && (y == 0) then x else sudan (n - 1) (sudan n x (y - 1)) (y + (sudan n x (y - 1)))
The test results were as expected. But the function is not tail recursive.
